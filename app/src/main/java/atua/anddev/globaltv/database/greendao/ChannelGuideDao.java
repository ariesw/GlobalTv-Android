package atua.anddev.globaltv.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import atua.anddev.globaltv.entity.ChannelGuide;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHANNEL_GUIDE".
*/
public class ChannelGuideDao extends AbstractDao<ChannelGuide, String> {

    public static final String TABLENAME = "CHANNEL_GUIDE";

    /**
     * Properties of entity ChannelGuide.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Lang = new Property(1, String.class, "lang", false, "LANG");
        public final static Property DisplayName = new Property(2, String.class, "displayName", false, "DISPLAY_NAME");
    }


    public ChannelGuideDao(DaoConfig config) {
        super(config);
    }
    
    public ChannelGuideDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHANNEL_GUIDE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"LANG\" TEXT," + // 1: lang
                "\"DISPLAY_NAME\" TEXT);"); // 2: displayName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHANNEL_GUIDE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChannelGuide entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String lang = entity.getLang();
        if (lang != null) {
            stmt.bindString(2, lang);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(3, displayName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChannelGuide entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String lang = entity.getLang();
        if (lang != null) {
            stmt.bindString(2, lang);
        }
 
        String displayName = entity.getDisplayName();
        if (displayName != null) {
            stmt.bindString(3, displayName);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public ChannelGuide readEntity(Cursor cursor, int offset) {
        ChannelGuide entity = new ChannelGuide( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // lang
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // displayName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChannelGuide entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLang(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDisplayName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(ChannelGuide entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(ChannelGuide entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChannelGuide entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
