package atua.anddev.globaltv.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import atua.anddev.globaltv.entity.GuideProv;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "GUIDE_PROV".
 */
public class GuideProvDao extends AbstractDao<GuideProv, Void> {

    public static final String TABLENAME = "GUIDE_PROV";

    /**
     * Properties of entity GuideProv.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Url = new Property(1, String.class, "url", false, "URL");
        public final static Property File = new Property(2, String.class, "file", false, "FILE");
    }


    public GuideProvDao(DaoConfig config) {
        super(config);
    }

    public GuideProvDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"GUIDE_PROV\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"URL\" TEXT," + // 1: url
                "\"FILE\" TEXT);"); // 2: file
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GUIDE_PROV\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, GuideProv entity) {
        stmt.clearBindings();

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }

        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, GuideProv entity) {
        stmt.clearBindings();

        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }

        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(2, url);
        }

        String file = entity.getFile();
        if (file != null) {
            stmt.bindString(3, file);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }

    @Override
    public GuideProv readEntity(Cursor cursor, int offset) {
        GuideProv entity = new GuideProv( //
                cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // url
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // file
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, GuideProv entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setFile(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
    }

    @Override
    protected final Void updateKeyAfterInsert(GuideProv entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }

    @Override
    public Void getKey(GuideProv entity) {
        return null;
    }

    @Override
    public boolean hasKey(GuideProv entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
