package atua.anddev.globaltv.database.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

import atua.anddev.globaltv.entity.Programme;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PROGRAMME".
 */
public class ProgrammeDao extends AbstractDao<Programme, Long> {

    public static final String TABLENAME = "PROGRAMME";

    /**
     * Properties of entity Programme.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Start = new Property(1, String.class, "start", false, "START");
        public final static Property Stop = new Property(2, String.class, "stop", false, "STOP");
        public final static Property Channel = new Property(3, String.class, "channel", false, "CHANNEL");
        public final static Property Title = new Property(4, String.class, "title", false, "TITLE");
        public final static Property Desc = new Property(5, String.class, "desc", false, "DESC");
        public final static Property Category = new Property(6, String.class, "category", false, "CATEGORY");
    }


    public ProgrammeDao(DaoConfig config) {
        super(config);
    }

    public ProgrammeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROGRAMME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"START\" TEXT," + // 1: start
                "\"STOP\" TEXT," + // 2: stop
                "\"CHANNEL\" TEXT," + // 3: channel
                "\"TITLE\" TEXT," + // 4: title
                "\"DESC\" TEXT," + // 5: desc
                "\"CATEGORY\" TEXT);"); // 6: category
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROGRAMME\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Programme entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(2, start);
        }

        String stop = entity.getStop();
        if (stop != null) {
            stmt.bindString(3, stop);
        }

        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(4, channel);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }

        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }

        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Programme entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String start = entity.getStart();
        if (start != null) {
            stmt.bindString(2, start);
        }

        String stop = entity.getStop();
        if (stop != null) {
            stmt.bindString(3, stop);
        }

        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(4, channel);
        }

        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(5, title);
        }

        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(6, desc);
        }

        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(7, category);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    @Override
    public Programme readEntity(Cursor cursor, int offset) {
        Programme entity = new Programme( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // start
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stop
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // channel
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // title
                cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // desc
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // category
        );
        return entity;
    }

    @Override
    public void readEntity(Cursor cursor, Programme entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStop(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChannel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDesc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCategory(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
    }

    @Override
    protected final Long updateKeyAfterInsert(Programme entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    @Override
    public Long getKey(Programme entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Programme entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }

}
